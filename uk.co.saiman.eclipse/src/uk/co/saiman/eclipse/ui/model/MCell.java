/*
 * Copyright (C) 2018 Scientific Analysis Instruments Limited <contact@saiman.co.uk>
 *          ______         ___      ___________
 *       ,'========\     ,'===\    /========== \
 *      /== \___/== \  ,'==.== \   \__/== \___\/
 *     /==_/____\__\/,'==__|== |     /==  /
 *     \========`. ,'========= |    /==  /
 *   ___`-___)== ,'== \____|== |   /==  /
 *  /== \__.-==,'==  ,'    |== '__/==  /_
 *  \======== /==  ,'      |== ========= \
 *   \_____\.-\__\/        \__\\________\/
 *
 * This file is part of uk.co.saiman.eclipse.treeview.
 *
 * uk.co.saiman.eclipse.treeview is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * uk.co.saiman.eclipse.treeview is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package uk.co.saiman.eclipse.ui.model;

import java.util.List;

import org.eclipse.e4.core.contexts.IEclipseContext;
import org.eclipse.e4.ui.di.AboutToShow;
import org.eclipse.e4.ui.model.application.MApplicationElement;
import org.eclipse.e4.ui.model.application.ui.menu.MPopupMenu;

import uk.co.saiman.data.format.MediaType;
import uk.co.saiman.eclipse.ui.TransferFormat;

/**
 * This interface represents a specialization of a UI cell, for example in a
 * table or tree. It performs a similar function to a LabelDecorator This can be
 * used to inject behavior and prepare UI for a cell according to its contents.
 * <p>
 * The contribution class should contain exactly one method annotated with
 * {@link AboutToShow}. This method defines the behavior to prepare the tree
 * item for the element.
 * <p>
 * TODO Ultimately this interface should be generated by the EMF model
 * generator, with implementations instantiated by the EMF runtime, such that it
 * can be supported in the E4 application model. It is named according to the
 * convention of {@link MApplicationElement application elements} to indicate
 * this intent. Currently it is defined manually, and instances are collected
 * via OSGi DS.
 * 
 * @author Elias N Vasylenko
 */
public interface MCell {
  String ENTRY_DATA = "uk.co.saiman.eclipse.ui.model.entry.data";

  String getElementId();

  MCell getParent();

  void setParent(MCell parent);

  /**
   * Each child represents a <em>class</em> of children and may have multiple
   * instances associated with an instance of this cell.
   * 
   * @return the list of children available to be populated
   */
  List<MCell> getChildren();

  /**
   * Get the tree contribution which this is a specialization of. The inverse of
   * {@link #getSpecializations()}. Any tree item for which this is applicable
   * must also have the specialized contribution applied to it.
   * 
   * @return the tree contribution which this specializes, or null if it stands
   *         alone.
   */
  MCell getSpecialized();

  void setSpecialized(MCell specialized);

  MPopupMenu getPopupMenu();

  void setPopupMenu(MPopupMenu popupMenu);

  /**
   * Get the available specializations of this contribution. The inverse of
   * {@link #getSpecialized()}.
   * 
   * @return a list of all contributions which {@link #getSpecialized()
   *         specialize} this one.
   */
  List<MCell> getSpecializations();

  /**
   * An editable tree contribution is modally editable and should be
   * {@link AboutToShow re-initialized} upon entering or exiting the editing mode.
   * A tree contribution may be modifiable without being editable.
   * 
   * @return true if this contribution implements an editing mode for an item it
   *         is applied to
   */
  boolean isEditable();

  void setEditable(boolean editable);

  Class<?> getContributionClass();

  Object getObject();

  /**
   * @return a list of media types the cell should support for conversion
   */
  List<MediaType> getMediaTypes();

  /**
   * Transfer formats are used to serialize and deserialize a cell's data in order
   * to facilitate, for example, drag-and-drop or copy-and-paste functionality.
   * <p>
   * A set of transfer formats is populated automatically to satisfy the
   * {@link #getMediaTypes() media types} accepted by the cell. It can be modified
   * manually to customize serialization behavior.
   * 
   * @return a list of supported transfer formats in order of precedence
   */
  List<TransferFormat<?>> getTransferFormats();

  IEclipseContext getContext();
}
